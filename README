Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Solution:

* Initialize current node to dummy head of the returning list.
* Initialize carry to 0
* init p and q, as l1 l2
* loop unilt you reach the  ned
   * set sum to carry   
   * if p and q are not nil:
     * add to sum p.Val
     * add to sum q.Val
     * set each to Next
   * set carry to sum/10
   * set curr.Next to the mod of 10
   * set curr to curr.next
   * if carrr > 0 
      * curr.Next is set to a new Node, with carry
   * return the dummyHead.Next

   
